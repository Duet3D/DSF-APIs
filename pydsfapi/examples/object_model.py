#!/usr/bin/env python3

from pydsfapi.connections import CommandConnection

import re
import logging
import json


class TestMcode:
    def __init__(self, code, param=False, result=None, timeout=4, desc="missing"):
        self.code = code
        self.param = param
        self.result = result
        self.desc = desc

    def print(self):
        logging.info("M{code} {param} '{desc}' ".format(code=self.code, param=self.param, desc=self.desc))

    def getCommand(self):
        return "M{} {}".format(self.code, self.param)

    def test(self, result):
        if self.result is None:
            logging.info("M{} {} result: {}".format(self.code, self.param, result))
            return False

        logging.debug("testing\n  {} {}\n  {} {}\n".format(
            type(result), result, type(self.result), self.result
        ))
        res = re.match(self.result, result)
        return res is not None


    def send(self, conn):
        return conn.perform_simple_code(self.getCommand())

    def other(self, conn):
        pass


mcodes = [
    # TestMcode(code=0, desc="Stop"),
    # TestMcode(code=1, desc="Sleep"),
    # TestMcode(code=3, desc="Spin spindle clockwise"),
    # TestMcode(code=4, desc="Spin spindle counter clockwise"),
    # TestMcode(code=5, desc="Spindle motor off"),
    # TestMcode(code=17, desc="Motors on"),
    # TestMcode(code=18, desc="Motors off"),
    # TestMcode(code=20, desc="List files on SD card"),
    # TestMcode(code=21, desc="Initialise SD card"),
    # TestMcode(code=22, desc="Release SD card"),
    # TestMcode(code=23, desc="Set file to print"),
    # TestMcode(code=24, desc="Print/resume-printing the selected file"),
    # TestMcode(code=25, desc="Pause the print"),
    # TestMcode(code=26, desc="Set SD position"),
    # TestMcode(code=27, desc="Report print status - Deprecated"),
    # TestMcode(code=28, desc="Write to file"),
    # TestMcode(code=29, desc="End of file being written; should be intercepted before getting here"),
    # TestMcode(code=30, desc="Delete file"),
    # TestMcode(code=32, desc="Select file and start SD print"),
    # TestMcode(code=36, desc="Return file information"),
    # TestMcode(code=37, desc="Simulation mode on/off, or simulate a whole file"),
    # TestMcode(code=38, desc="Report SHA1 of file"),
    # TestMcode(code=39, desc="Return SD card info"),
    # TestMcode(code=42, desc="Turn an output pin on or off"),
    # TestMcode(code=73, desc="Slicer-inserted print time values"),
    # TestMcode(code=80, desc="ATX power on"),
    # TestMcode(code=81, desc="ATX power off"),
    # TestMcode(code=82, desc="Use absolute extruder positioning"),
    # TestMcode(code=83, desc="Use relative extruder positioning"),
    # TestMcode(code=84),
    # TestMcode(code=85, desc="Set inactive time"),
    # TestMcode(code=92, desc="Set/report steps/mm for some axes"),
    # TestMcode(code=98, desc="Call Macro/Subprogram"),
    # TestMcode(code=99, desc="Return from Macro/Subprogram"),
    # TestMcode(code=101, desc="Un-retract, generated by S3D if 'Include M101/101/103' is enabled"),
    # TestMcode(code=102),
    # TestMcode(code=103, desc="Retract, generated by S3D if 'Include M101/101/103' is enabled"),
    # TestMcode(code=104),
    # TestMcode(code=105, desc="Get temperatures"),
    # TestMcode(code=106, desc="Set/report fan values"),
    # TestMcode(code=107, desc="Fan off - deprecated"),
    # TestMcode(code=108, desc="Cancel waiting for temperature"),
    # TestMcode(code=109, desc="Deprecated in RRF, but widely generated by slicers"),
    # TestMcode(code=110, desc="Set line numbers"),
    # TestMcode(code=111, desc="Debug level"),
    # # TestMcode(code=112, desc="Emergency stop - acted upon in Webserver, but also here in case it comes from USB etc."),
    # TestMcode(code=114),
    TestMcode(code=115, desc="Print firmware version or set hardware type"),
    # TestMcode(code=116, desc="Wait for set temperatures"),
    # TestMcode(code=117, desc="Display message"),
    # TestMcode(code=118, desc="Echo message on host"),
    # TestMcode(code=119),
    # TestMcode(code=120),
    # TestMcode(code=121),
    # TestMcode(code=122),
    # TestMcode(code=140, desc="Bed temperature"),
    # TestMcode(code=141, desc="Chamber temperature"),
    # TestMcode(code=143, desc="Configure heater protection"),
    # TestMcode(code=144, desc="Set bed to standby, or to active if S1 parameter given"),
    # TestMcode(code=150),
    # TestMcode(code=190, desc="Set bed temperature and wait"),
    # TestMcode(code=191, desc="Set chamber temperature and wait"),
    # TestMcode(code=200, desc="Set filament diameter for volumetric extrusion and enable/disable volumetric extrusion"),
    # TestMcode(code=201, desc="Set/print axis accelerations"),
    # TestMcode(code=203, desc="Set/print minimum/maximum feedrates"),
    # TestMcode(code=204, desc="Set max travel and printing accelerations"),
    # TestMcode(code=205, desc="Set/print maximum jerk speeds in mm/sec"),
    # TestMcode(code=206, desc="Offset axes"),
    # TestMcode(code=207, desc="Set firmware retraction details"),
    # TestMcode(code=208, desc="Set/print maximum axis lengths. If there is an S parameter with value 1 then we set the min value, else we set the max value."),
    # TestMcode(code=220, desc="Set/report speed factor override percentage"),
    # TestMcode(code=221, desc="Set/report extrusion factor override percentage"),
    # TestMcode(code=226, desc="Synchronous pause, normally initiated from within the file being printed"),
    # TestMcode(code=260, desc="I2C send"),
    # TestMcode(code=261, desc="I2C send"),
    # TestMcode(code=280, desc="Servos"),
    # TestMcode(code=290, desc="Baby stepping"),
    # TestMcode(code=291, desc="Display message, optionally wait for acknowledgement"),
    # TestMcode(code=292, desc="Acknowledge message"),
    # TestMcode(code=300, desc="Beep"),
    # TestMcode(code=301, desc="Set/report hot end PID values"),
    # TestMcode(code=302, desc="Allow, deny or report cold extrudes and configure minimum extrusion/retraction temps"),
    # TestMcode(code=303, desc="Run PID tuning"),
    # TestMcode(code=304, desc="Set/report heated bed PID values"),
    # TestMcode(code=305, desc="Set/report specific heater parameters"),
    # TestMcode(code=307, desc="Set heater process model parameters"),
    # TestMcode(code=308),
    # TestMcode(code=350, desc="Set/report microstepping"),
    # TestMcode(code=374, desc="Save grid and height map to file"),
    # TestMcode(code=375, desc="Load grid and height map from file and enable compensation"),
    # TestMcode(code=376, desc="Set taper height"),
    # TestMcode(code=400, desc="Wait for current moves to finish"),
    # TestMcode(code=401, desc="Deploy Z probe"),
    # TestMcode(code=402, desc="Retract Z probe"),
    # TestMcode(code=404, desc="Filament width and nozzle diameter"),
    # TestMcode(code=408, desc="Get status in JSON format"),
    # TestMcode(code=409, desc="Get object model values in JSON format"),
    # TestMcode(code=450, desc="Report printer mode"),
    # TestMcode(code=451, desc="Select FFF printer mode"),
    # TestMcode(code=452, desc="Select laser mode"),
    # TestMcode(code=453, desc="Select CNC mode"),
    # TestMcode(code=470, desc="mkdir"),
    # TestMcode(code=471, desc="move/rename file/directory"),
    # TestMcode(code=486, desc="number object or cancel object"),
    # TestMcode(code=500, desc="Store parameters in config-override.g"),
    # TestMcode(code=501, desc="Load parameters from config-override.g"),
    # # TestMcode(code=502, desc="Revert to default 'factory settings' ignoring values in config-override.g"),
    # TestMcode(code=503, desc="List variable settings"),
    # TestMcode(code=505, desc="set sys folder"),
    # TestMcode(code=540, desc="Set/report MAC address"),
    # TestMcode(code=550, desc="Set/report machine name"),
    # TestMcode(code=551, desc="Set password (no option to report it)"),
    # TestMcode(code=552, desc="Enable/Disable network and/or Set/Get IP address"),
    # TestMcode(code=553, desc="Set/Get netmask"),
    # TestMcode(code=554, desc="Set/Get gateway"),
    # TestMcode(code=555, desc="Set/report firmware type to emulate"),
    # TestMcode(code=556, desc="Axis compensation (we support only X, Y, Z)"),
    # TestMcode(code=557, desc="Set/report Z probe point coordinates"),
    # TestMcode(code=558, desc="Set or report Z probe type and for which axes it is used"),
    # TestMcode(code=559),
    # TestMcode(code=560, desc="Binary writing"),
    # TestMcode(code=561, desc="Set identity transform and disable height map"),
    # TestMcode(code=562, desc="Reset temperature fault - use with great caution"),
    # TestMcode(code=563, desc="Define tool"),
    # TestMcode(code=564, desc="Think outside the box?"),
    # TestMcode(code=566, desc="Set/print maximum jerk speeds in mm/min"),
    # TestMcode(code=567, desc="Set/report tool mix ratios"),
    # TestMcode(code=568, desc="Tool Settings"),
    # TestMcode(code=569, desc="Set/report axis direction"),
    # TestMcode(code=570, desc="Set/report heater monitoring"),
    # TestMcode(code=571, desc="Set output on extrude"),
    # TestMcode(code=572, desc="Set/report pressure advance"),
    # TestMcode(code=573, desc="Report heater average PWM"),
    # TestMcode(code=574, desc="Set endstop configuration"),
    # TestMcode(code=575, desc="Set communications parameters"),
    # TestMcode(code=577, desc="Wait until endstop input is triggered"),
    # TestMcode(code=578, desc="Fire Inkjet bits"),
    # TestMcode(code=579, desc="Scale Cartesian axes (mostly for Delta configurations)"),
    # TestMcode(code=580, desc="(De)Select Roland mill"),
    # TestMcode(code=581, desc="Configure external trigger"),
    # TestMcode(code=582, desc="Check external trigger"),
    # TestMcode(code=584, desc="Set axis/extruder to stepper driver(s) mapping"),
    # TestMcode(code=585, desc="Probe Tool"),
    # TestMcode(code=586, desc="Configure network protocols"),
    # TestMcode(code=587, desc="Add WiFi network or list remembered networks"),
    # TestMcode(code=588, desc="Forget WiFi network"),
    # TestMcode(code=589, desc="Configure access point"),
    # TestMcode(code=591, desc="Configure filament sensor"),
    # TestMcode(code=592, desc="Configure nonlinear extrusion"),
    # TestMcode(code=593, desc="Configure dynamic ringing cancellation"),
    # TestMcode(code=594, desc="Enter or leave height following mode"),
    # TestMcode(code=595, desc="Configure movement queue s"),

    # TestMcode(code=409, param="F\"v\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"boards\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # # TestMcode(code=409, param="K\"boards\" F\"d2vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"directories\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"fans\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"global\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"heat\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"inputs\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"job\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"limits\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"move\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"network\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"scanner\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"sensors\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"seqs\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"spindles\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"state\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"tools\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"volumes\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"volumes\" F\"d99vn\"", desc="Get object model values in JSON format"),
    # TestMcode(code=409, param="K\"invalid\" F\"d99vn\"", desc="Get object model values in JSON format"),
]


def printKeys(parent, dic):

    if isinstance(dic, dict):
        for key, val in dic.items():
            print("{}, {}".format(parent + '/' + key, type(val)))

            if isinstance(val, dict):
                printKeys(parent + '/' + key, val)
                return
            if isinstance(val, list):
                for elem in val:
                    printKeys(parent + '/' + key, elem)
                    return


def testPrintKeys(result):
    try:
        j = json.loads(result)
    except Exception as error:
        logging.error("Failed to parse json {}\n    {}".format(error, result))
        return

    printKeys("", j)


def send_all():
    conn = CommandConnection(debug=False)
    conn.connect()
    print("opened connection")

    result = None

    for entry in mcodes:
        try:
            result = entry.send(conn)
        except TimeoutError as error:
            logging.warning("Warning: {}".format(error))
            break
        except Exception as error:
            logging.error("Error: {}".format(error))
            break

        # if (entry.test(result)):
            # logging.info("{}: OK".format(entry.getCommand()))
        # else:
            # logging.error("{}: FAIL".format(entry.getCommand()))

        entry.print()
        testPrintKeys(result)

    conn.close()
    print("closed connection")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.DEBUG,
        format='*** %(asctime)s - %(message)s',
        filename=None
    )

    logging.info("starting tests")
    send_all()
